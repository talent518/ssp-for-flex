<?xml version="1.0" encoding="utf-8"?>
<component1:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:component="com.fenxihui.library.component.*"
				   xmlns:component1="com.fenxihui.library.component.*"
				   width="590" height="472" minWidth="535" minHeight="440"
				   creationComplete="initWindow();" frameRate="5" horizontalGap="5"
				   layout="horizontal" paddingBottom="5" paddingLeft="5" paddingRight="5"
				   paddingTop="5" title="正在与“{nickname}”对话中……">
	<fx:Declarations>
		<fx:XMLList id="sendMenu">
			<menuitem label="单击发送按钮发消息" groupName="send" name="Click" toggled="true" type="radio"/>
			<menuitem type="separator"/>
			<menuitem label="按Enter键发送消息" groupName="send" name="Enter" type="radio"/>
			<menuitem label="按Ctrl+Enter键发送消息" groupName="send" name="CtrlEnter" type="radio"/>
		</fx:XMLList>
		<mx:DateFormatter id="df" formatString="HH:NN:SS"/>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace component "com.fenxihui.library.component.*";
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.fenxihui.desktop.utils.Params;
			import com.fenxihui.desktop.utils.RemoteProxy;
			import com.fenxihui.desktop.utils.Smileys;
			import com.riaidea.text.UploadBitmap;
			
			import flash.events.DataEvent;
			import flash.events.Event;
			import flash.events.ProgressEvent;
			import flash.net.FileFilter;
			import flash.net.FileReference;
			import flash.net.URLRequest;
			
			import mx.collections.ArrayCollection;
			import mx.events.ColorPickerEvent;
			import mx.events.MenuEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.managers.CursorManagerPriority;
			
			import spark.events.IndexChangeEvent;
			
			[Embed(source="assets/DividedBox_verticalCursor.png")]
			[Bindable]
			private static var overCursor:Class;
			
			private var startResized:Boolean=false;
			private var oldMouseY:Number=0;
			private var oldHeight:Number=0;
			private var oldMaxHeight:Number=0;
			
			private static var _consultWindow:ConsultWindow;
			
			public var userId:uint;
			
			[Bindable]
			public var nickname:String;

			private var _sendKey:String='Click';

			public function get sendKey():String
			{
				return _sendKey;
			}

			public function set sendKey(value:String):void
			{
				if(_sendKey==value)
					return;
				sendMenu.(attribute('name')==_sendKey).@toggled=false;
				_sendKey = value;
				sendMenu.(attribute('name')==value).@toggled=true;
			}

			public static function get consultWindow():ConsultWindow{
				if(!_consultWindow){
					_consultWindow=new ConsultWindow;
				}
				return _consultWindow;
			}
			
			public static function remove():void{
				if(!_consultWindow)
					return;
				_consultWindow.nativeWindow.close();
				_consultWindow.removeAllChildren();
				_consultWindow.removeAllElements();
				_consultWindow=null;
			}
			
			[Bindable]
			private var fonts:ArrayCollection;
			[Bindable]
			private var sizes:ArrayCollection;

			private var fileReference:FileReference;
			private var urlRequest:URLRequest;
			private var imageTypes:FileFilter = new FileFilter("图片 (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg; *.jpeg; *.gif; *.png");

			public function initWindow():void{
				for each(var hRule:HRule in [hRuleResizeInputHeight1,hRuleResizeInputHeight2]){
					if(hRule){
						hRule.addEventListener(MouseEvent.MOUSE_OVER,overCursorEvent);
						hRule.addEventListener(MouseEvent.MOUSE_OUT,outCursorEvent);
						hRule.addEventListener(MouseEvent.MOUSE_DOWN,startResize);
						hRule.addEventListener(MouseEvent.MOUSE_UP,stopResize);
					}
				}
				var isSingle:Boolean=(_consultWindow==this);
				addEventListener(MouseEvent.MOUSE_UP,stopResize);
				stage.frameRate=10;
				addEventListener(Event.CLOSE,function(e:Event):void{
					e.preventDefault();
					RemoteProxy.bind('Consult.Close.Succeed',function(request:XML):void{
						if(isSingle){
							remove();
						}
					});
					RemoteProxy.bind('Consult.Close.Failed',function(request:XML):void{
						ShowDialog(request.text(),false,function():void{
							if(isSingle){
								remove();
							}
						});
					});
					RemoteProxy.send('Consult.Close',{userId:userId});
				});
				readMessage();
				
				fonts=new ArrayCollection(Font.enumerateFonts(true));
				sizes=new ArrayCollection([12,14,16,18,20,22,24,26,28,36,48]);
				
				rtfInput.defaultTextFormat.size=20;
				rtfInput.defaultTextFormat.bold=true;
				rtfInput.defaultTextFormat.color=0xff0000;
				rtfInput.defaultTextFormat.letterSpacing=1;

				urlRequest = new URLRequest(Params.UPLOAD_URL);
				urlRequest.method=URLRequestMethod.POST;
				urlRequest.data='path=consult&uid='+Params.user.uid+'&password='+Params.user.password;
				rtfInput.uploadBitmap=new UploadBitmap(Params.UPLOAD_URL,urlRequest.method,urlRequest.data as String);
				fileReference = new FileReference();
				fileReference.addEventListener(Event.SELECT, function(e:Event):void{
					trace("文件:"+fileReference.name+"      "+"大小:"+fileReference.size+"字节");
					//fileReference.load();
					fileReference.upload(urlRequest,'upload');
				}); 
				fileReference.addEventListener(ProgressEvent.PROGRESS,function(e:ProgressEvent):void{
					trace(" 已上传 " + e.bytesLoaded + " 字节，共 " + e.bytesTotal + " 字节");
				});
				fileReference.addEventListener(IOErrorEvent.IO_ERROR,function():void{
					ShowDialog('网络连接失败！',false);
				});
				fileReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,function(e:DataEvent):void{
					trace(e.data);
					var xml:XML=XML(e.data);
					if(xml){
						if(parseInt(xml.@status.toString())){
							rtfInput.insertSprite(String(xml.text()));
						}else{
							ShowDialog(xml.text(),false);
						}
					}else{
						ShowDialog('上传失败！',false);
					}
				});
			}
			//上传
			private function browse():void{
				fileReference.browse([imageTypes]);
			}
			
			protected function overCursorEvent(event:MouseEvent):void{
				Mouse.hide();
				cursorManager.setCursor(overCursor,CursorManagerPriority.HIGH,-6,-8);
			}
			protected function outCursorEvent(event:MouseEvent):void{
				if(startResized)
					return;
				Mouse.show();
				cursorManager.removeAllCursors();
			}
			
			private function startResize(e:MouseEvent):void{
				e.stopPropagation();
				oldMouseY=mouseY;
				oldHeight=rtfInput.height;
				oldMaxHeight=rtfOutput.height+rtfInput.height;
				addEventListener(MouseEvent.MOUSE_MOVE,resizeEvent);
				startResized=true;
			}
			private function resizeEvent(e:MouseEvent):void{
				e.stopPropagation();
				var h:Number=oldHeight-mouseY+oldMouseY;
				//trace('old:'+oldMouseY,'new:'+mouseY,'result:'+h,rtfInput.explicitMaxHeight);
				if(h>rtfInput.minHeight && rtfInput.minHeight+h<=oldMaxHeight)
					rtfInput.height=h;
				Mouse.hide();
			}
			private function stopResize(e:MouseEvent):void{
				e.stopPropagation();
				Mouse.show();
				cursorManager.removeAllCursors();
				removeEventListener(MouseEvent.MOUSE_MOVE,resizeEvent);
				startResized=false;
			}
			private function imageclick(evt:Event):void{
				//set focus/caretIndex to _input
				stage.focus = rtfInput.textField;
				if (rtfInput.isSpriteAt(rtfInput.caretIndex))
				{
					rtfInput.caretIndex+=1;
				}
				rtfInput.insertSprite(evt.currentTarget.source,rtfInput.caretIndex,true,false);
				focusManager.setFocus(rtfInput);
				this.popUpButton_pic.close();
			}
			//设置字体属性
			private function checkBox_fontsetup(evt:Event):void
			{
				var ch:CheckBox=evt.currentTarget as CheckBox;
				var data:String=ch.data.toString();
				
				if (data == "fontWeight"){
					rtfInput.defaultTextFormat.bold=ch.selected;
				}
				
				if (data == "fontStyle"){
					rtfInput.defaultTextFormat.italic=ch.selected;
				}
				
				if (data == "textDecoration"){
					rtfInput.defaultTextFormat.underline=ch.selected;
				}
				rtfInput_changeTextForm();
			}
			
			//设置字体颜色
			private function colorPicker_color(evt:ColorPickerEvent):void
			{
				rtfInput.defaultTextFormat.color=this.fontsetup_color.selectedColor;
				rtfInput_changeTextForm();
			}
			
			private function now():String{
				return df.format(new Date);
			}
			
			public function appendOutputMessage(msg:XML):void{
				var xml:XML=XML(msg.message);
				rtfOutput.append('<p align="left"><font size="14" color="'+(parseInt(msg.@from_uid.toString())==Params.user.uid?'#008040':'#0022ee')+'"><b>'+msg.@nickname.toString()+'</b>&#32;&#32;'+msg.@dateline.toString()+'</font></p>');
				xml.htmlText='<textformat leftmargin="24px">'+xml.htmlText+'</textformat>';
				rtfOutput.importXML(xml);
			}
			
			public function readMessage():void{
				RemoteProxy.bind('Consult.Receive.'+userId,function(request:XML):void{
					appendOutputMessage(XML(request.message));
					nativeWindow.notifyUser(NotificationType.CRITICAL);
					Main.addFlickerQueue('consult',Icons.Broadcast,"收到来自“"+nickname+"”的信息");
					setTimeout(function():void{
						Main.removeFlickerQueue('consult');
					},3000);
				});
				RemoteProxy.bind('Consult.Open.Succeed',function(request:XML):void{
					var msg:XML;
					var _num:int;
					for each(msg in request.message){
						appendOutputMessage(msg);
						_num--;
					}
					MainWindow.setFlicker('consult',_num);
				});
				RemoteProxy.bind('Consult.Open.Failed',function(request:XML):void{
					ShowDialog(request.text(),false);
				});
				RemoteProxy.send('Consult.Open',{userId:userId});
			}
			
			private static const urlRegExp:RegExp=new RegExp("((?:http|ftp|https)://)([a-z0-9_-]+\.[a-z0-9_-]+)(\.[a-z0-9_-]*)((\&amp\;|\%[0-9a-z]{2}|[\.\/\?\&\=a-z0-9_-])*)", "ig");
			private static const reValue:String="<a href='$1$2$3' target='_blank'><font color=\"#0072c1\"><b><i>$1$2$3$4</i></b></font></a>";
			
			protected function btnSend_clickHandler(event:MouseEvent):void{
				if(rtfInput.contentLength<=0){
					lblSendStatus.visible=true;
					lblSendStatus.setStyle('color',0xb60003);
					lblSendStatus.text='至少也得写点什么吧！';
					setTimeout(function():void{
						lblSendStatus.visible=false;
					},5000);
					return;
				}
				var xml:XML=rtfInput.exportXML();
				xml.htmlText=xml.htmlText.toString().replace(urlRegExp, reValue);
				lblSendStatus.setStyle('color',0x0300b6);
				lblSendStatus.text='正在发送中…';
				lblSendStatus.visible=true;
				RemoteProxy.bind('Consult.Send.Succeed',function(request:XML):void{
					rtfOutput.append('<p align="left"><font size="14" color="#008040"><b>'+Params.profile.nickname+'</b>&#32;&#32;'+now()+'</font></p>');
					xml.htmlText='<textformat leftmargin="24px">'+xml.htmlText.toString()+'</textformat>';
					rtfOutput.importXML(xml);
					rtfInput.clear();
					lblSendStatus.setStyle('color',0x00b603);
					lblSendStatus.text=request.text();
					lblSendStatus.visible=true;
					setTimeout(function():void{
						lblSendStatus.visible=false;
					},5000);
					btnSend.enabled=true;
				});
				RemoteProxy.bind('Consult.Send.Failed',function(request:XML):void{
					lblSendStatus.setStyle('color',0xb60003);
					lblSendStatus.text=request.text();
					lblSendStatus.visible=true;
					setTimeout(function():void{
						lblSendStatus.visible=false;
					},5000);
					btnSend.enabled=true;
				});
				btnSend.enabled=false;
				RemoteProxy.send('Consult.Send',{userId:userId,message:xml});
			}
			
			protected function rtfInput_focusInHandler(event:FocusEvent):void
			{
				lblSendStatus.setStyle('color',0x0300b6);
				lblSendStatus.text='正在输入中…';
				lblSendStatus.visible=true;
			}
			
			protected function rtfInput_focusOutHandler(event:FocusEvent):void
			{
				setTimeout(function():void{
					lblSendStatus.visible=false;
				},5000);
			}
			
			protected function btnSend_itemClickHandler(event:MenuEvent):void
			{
				var __sendKey:String=sendKey;
				sendKey=event.item.@name.toString();
				if(__sendKey!=sendKey){
					RemoteProxy.send('User.SendKey',{key:sendKey});
				}
			}
			
			protected function rtfInput_keyDownHandler(event:KeyboardEvent):void
			{
				switch(sendKey){
					case 'Enter':
						if(event.keyCode==Keyboard.ENTER){
							event.preventDefault();
							btnSend_clickHandler(null);
						}
						break;
					case 'CtrlEnter':
						if(event.ctrlKey && event.keyCode==Keyboard.ENTER){
							event.preventDefault();
							btnSend_clickHandler(null);
						}
						break;
				}
			}
			
			protected function fontsetup_fontFamily_changeHandler(event:IndexChangeEvent):void
			{
				var font:Font=fontsetup_fontFamily.selectedItem as Font;
				rtfInput.defaultTextFormat.font=font.fontName;
				rtfInput_changeTextForm();
			}
			
			protected function fontsetup_fontSize_changeHandler(event:IndexChangeEvent):void
			{
				rtfInput.defaultTextFormat.size=fontsetup_fontSize.selectedItem;
				rtfInput_changeTextForm();
			}
			protected function rtfInput_changeTextForm():void{
				rtfInput.textField.defaultTextFormat=rtfInput.defaultTextFormat;
				var beginIndex:int=rtfInput.textField.selectionBeginIndex;
				var endIndex:int=rtfInput.textField.selectionEndIndex;
				if(beginIndex==endIndex){
					beginIndex=endIndex=-1;
				}
				rtfInput.textField.setTextFormat(rtfInput.defaultTextFormat,beginIndex,endIndex);
			}
			
			private var historyWindow:ConsultHistoryWindow;
			protected function btnHistory_clickHandler(event:MouseEvent):void
			{
				if(!historyWindow){
					historyWindow=new ConsultHistoryWindow;
					historyWindow.addEventListener(Event.CLOSE,function(e:Event):void{
						historyWindow.nativeWindow.close();
						historyWindow.removeAllChildren();
						historyWindow.removeAllElements();
						historyWindow=null;
					});
				}
				with(historyWindow){
					open(true);
					nativeWindow.activate();
					nativeWindow.restore();
					nativeWindow.orderToFront();
					center();
					userId=this.userId;
					nickname=this.nickname;
				}
			}
			
		]]>
	</fx:Script>
	<s:BorderContainer left="10" width="100%" height="100%" borderColor="#cccccc" borderStyle="solid"
					   borderVisible="true" borderWeight="1">
		<s:layout>
			<s:VerticalLayout gap="0"/>
		</s:layout>
		<component1:ChatBox id="rtfOutput" width="100%" height="100%" autoScroll="true"/>
		<mx:HRule id="hRuleResizeInputHeight1" width="100%" height="1" strokeColor="#cccccc"/>
		<s:HGroup width="100%" height="30" paddingLeft="20" paddingRight="20" verticalAlign="middle">
			<mx:PopUpButton id="popUpButton_pic" width="50" icon="@Embed('assets/smileys.png')"
							openAlways="true" toolTip="请选择表情图片">
				<mx:popUp>
					<mx:TitleWindow id="titleWindow_popUp" width="400" height="200"
									close="popUpButton_pic.close();" cornerRadius="5"
									horizontalScrollPolicy="off" showCloseButton="true"
									title="单击图片选择聊天表情" verticalScrollPolicy="on">
						<mx:ToolBar width="400">
							<mx:Repeater id="smileys" dataProvider="{Smileys.smileys}">
								<mx:Image buttonMode="true" click="imageclick(event)"
										  data="{smileys.currentIndex}"
										  source="{smileys.currentItem.icon}"
										  toolTip="{smileys.currentItem.toolTip}"/>
							</mx:Repeater>
						</mx:ToolBar>
					</mx:TitleWindow>
				</mx:popUp>
			</mx:PopUpButton>
			<mx:PopUpButton id="popUpButton_fontSetup" width="50" icon="@Embed('assets/A.png')"
							openAlways="true" toolTip="设置字体样式">
				<mx:popUp>
					<mx:TitleWindow id="titleWindow_popUp_fontSetup"
									close="popUpButton_fontSetup.close();" cornerRadius="5"
									showCloseButton="true" title="选择字体样式">
						<mx:HBox>
							<s:ComboBox id="fontsetup_fontFamily" width="100"
										change="fontsetup_fontFamily_changeHandler(event)"
										dataProvider="{fonts}" labelField="fontName" paddingLeft="4"
										paddingRight="4" textAlign="left" toolTip="字体"/>
							<s:ComboBox id="fontsetup_fontSize" width="60"
										change="fontsetup_fontSize_changeHandler(event)"
										dataProvider="{sizes}" paddingLeft="4" paddingRight="4"
										textAlign="left" toolTip="字体"/>
							<mx:CheckBox id="fontsetup_fontWeight" label=""
										 change="checkBox_fontsetup(event)" data="fontWeight"
										 toolTip="粗体"/>
							<mx:Image source="@Embed('assets/b.png')" toolTip="粗体"/>
							<mx:CheckBox id="fontsetup_fontStyle" label=""
										 change="checkBox_fontsetup(event)" data="fontStyle"
										 toolTip="倾斜"/>
							<mx:Image source="@Embed('assets/i.png')" toolTip="倾斜"/>
							<mx:CheckBox id="fontsetup_textDecoration" label=""
										 change="checkBox_fontsetup(event)" data="textDecoration"
										 toolTip="下划线"/>
							<mx:Image source="@Embed('assets/u.png')" toolTip="下划线"/>
							<mx:ColorPicker id="fontsetup_color" change="colorPicker_color(event)"
											toolTip="颜色"/>
						</mx:HBox>
					</mx:TitleWindow>
				</mx:popUp>
			</mx:PopUpButton>
			<mx:Button id="btnUpload" label="上传图片" click="browse()" fontSize="12" fontWeight="normal"
					   tabIndex="4" textAlign="center"/>
			<s:Label id="lblSendStatus" width="100%" fontSize="14" fontWeight="bold"
					 textAlign="right" verticalAlign="middle"/>
		</s:HGroup>
		<mx:HRule id="hRuleResizeInputHeight2" width="100%" height="1" strokeColor="#cccccc"/>
		<component1:ChatBox id="rtfInput" width="100%" height="100" autoScroll="true"
							focusIn="rtfInput_focusInHandler(event)"
							focusOut="rtfInput_focusOutHandler(event)"
							keyDown="rtfInput_keyDownHandler(event)" type="input"/>
		<mx:HRule width="100%" height="1" strokeColor="#cccccc"/>
		<s:HGroup width="100%" height="45" gap="10" paddingLeft="10" paddingRight="10"
				  verticalAlign="middle">
			<s:Label left="20" width="100%" height="25" maxDisplayedLines="1"
					 showTruncationTip="true" text="股市有风险，操作请谨慎！" verticalAlign="middle"/>
			<mx:Button id="btnHistory" width="100" height="25" fontSize="12" tabIndex="4"
					   textAlign="center" label="查看直播记录" click="btnHistory_clickHandler(event)"
					   fontWeight="normal"/>
			<mx:Button id="btnClose" y="0" right="20" width="80" height="25"
					   label="关　闭" click="close()" fontSize="12" fontWeight="normal" tabIndex="4"
					   textAlign="center"/>
			<mx:PopUpMenuButton id="btnSend" y="-2" right="110" width="80" height="25" label="发　送"
								click="btnSend_clickHandler(event)" dataProvider="{sendMenu}"
								fontSize="12" fontWeight="normal"
								itemClick="btnSend_itemClickHandler(event)" labelField="@label"
								tabIndex="5"/>
		</s:HGroup>
	</s:BorderContainer>
</component1:Window>
