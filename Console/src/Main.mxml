<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
						xmlns:component="com.fenxihui.library.component.*"
						visible="false" width="393" height="245"
						creationComplete="initApplication();" layout="absolute"
						showStatusBar="false">
	<mx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace component "com.fenxihui.desktop.view.component.*";
		@namespace window "com.fenxihui.desktop.view.window.*";
		@namespace mx "library://ns.adobe.com/flex/mx";
		global{
			fontFamily:'宋体','Courier New';
		}
		.ToolTip{
			fontSize:14px;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import com.fenxihui.console.model.User;
			import com.fenxihui.console.utils.Params;
			import com.fenxihui.console.utils.RemoteProxy;
			import com.fenxihui.console.view.Loading;
			import com.fenxihui.console.view.window.LoginWindow;
			import com.fenxihui.console.view.window.MainWindow;
			
			import flash.desktop.DockIcon;
			import flash.desktop.NativeApplication;
			import flash.desktop.SystemTrayIcon;
			import flash.display.NativeMenu;
			import flash.display.NativeMenuItem;
			import flash.display.NativeWindow;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.net.URLRequest;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.Window;
			import mx.effects.Move;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.managers.ToolTipManager;
			import mx.utils.Base64Decoder;
			import mx.utils.Base64Encoder;
			import mx.utils.UIDUtil;
			
			import org.gif.events.FrameEvent;
			import org.gif.player.GIFPlayer;
			
			private static var _main:Main;
			
			[Embed(source="assets/app_16.png")]
			[Bindable]
			private var defIcon16:Class;
			
			[Embed(source="assets/app_32.png")]
			[Bindable]
			private var defIcon32:Class;
			
			[Embed(source="assets/app_48.png")]
			[Bindable]
			private var defIcon48:Class;

			[Embed(source="assets/app_128.png")]
			[Bindable]
			private var defIcon128:Class;
			
			private static const colorFilter:ColorMatrixFilter=new ColorMatrixFilter([0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);
			
			private function get defIcons():Array{
				return [new defIcon16().bitmapData,new defIcon32().bitmapData,new defIcon48().bitmapData,new defIcon128().bitmapData];
			}
			
			private var flickerIcons:Array=new Array(),noneIcons:Array=new Array();
			private var flickerQueues:Array=new Array(),flickerTimer:Timer=new Timer(3000,100);

			private var timer:Timer=new Timer(360);
			
			[Embed(source="assets/notify.mp3")]
			[Bindable]
			private var soundClass:Class;
			
			private var sound:Sound=new soundClass() as Sound;
			
			private var _trayToolTip:String,_oldTrayToolTip:String;

			public function getFlickerIconFromBitmap(bitmap:Bitmap):Array{
				var _mask:Sprite=new Sprite;
				_mask.graphics.clear();
				_mask.graphics.beginFill(0x0);
				_mask.graphics.drawRoundRect(0, 0,128,128,5, 5);
				_mask.graphics.endFill();
				bitmap.mask=_mask;
				
				var _flickerIcons:Array=[];
				
				var bitmapData:BitmapData;
				for each(var i:int in [16,32,48,128]){
					bitmapData=new BitmapData(i,i);
					bitmapData.applyFilter(bitmapData,bitmapData.rect,new Point(0,0),colorFilter);
					bitmapData.draw(bitmap,new Matrix(i/bitmap.width,0,0,i/bitmap.height));
					_flickerIcons.push(bitmapData.clone());
				}
				return _flickerIcons;
			}
			
			public function startFlickerIcon(_flickerIcons:Array,toolTip:String):void{
				_oldTrayToolTip=trayToolTip;
				trayToolTip=toolTip;
				flickerIcons=_flickerIcons;
				timer.reset();
				timer.start();
				NativeApplication.nativeApplication.icon.bitmaps=_flickerIcons;
			}
			
			public function stopFlickerIcon():void{
				if(!_oldTrayToolTip)
					return;
				trayToolTip=_oldTrayToolTip;
				this.flickerIcons=[];
				timer.reset();
				
				NativeApplication.nativeApplication.icon.bitmaps=defIcons;
			}
			
			public function addFlickerQueue(type:String,iconClass:Class,toolTip:String):void{
				removeFlickerQueue(type);
				flickerQueues.push({type:type,icons:getFlickerIconFromBitmap(new iconClass),toolTip:toolTip});
				flickerTimer.start();
				sound.play();
				flickerTimer.dispatchEvent(new TimerEvent(TimerEvent.TIMER));
			}
			
			public function removeFlickerQueue(type:String):void{
				for(var i:* in flickerQueues){
					if(flickerQueues[i].type==type){
						flickerQueues.splice(i,1);
						break;
					}
				}
				if(flickerQueues.length==0){
					flickerTimer.reset();
					stopFlickerIcon();
				}
			}
			
			public function get trayToolTip():String{
				return _trayToolTip;
			}
			
			public function set trayToolTip(toolTip:String):void{
				if (NativeApplication.supportsSystemTrayIcon){
					SystemTrayIcon(NativeApplication.nativeApplication.icon).tooltip=toolTip;
				}
				_trayToolTip=toolTip;
			}
			
			private function initApplication():void{
				NativeApplication.nativeApplication.autoExit = false;
				this.autoExit=false;
				iconMenu.addEventListener(FlexNativeMenuEvent.ITEM_CLICK,onSelectMenuItem);
				var noneIcon:BitmapData;
				for each(var side:int in [16,32,48,128]){
					noneIcon=new BitmapData(side,side);
					noneIcon.applyFilter(noneIcon,noneIcon.rect,new Point(0,0),colorFilter);
					noneIcons.push(noneIcon.clone());
				}

				NativeApplication.nativeApplication.icon.bitmaps=defIcons;
				timer.addEventListener(TimerEvent.TIMER,function(e:TimerEvent):void{
					NativeApplication.nativeApplication.icon.bitmaps=(timer.currentCount%2==0?flickerIcons:noneIcons);
				});
				flickerTimer.addEventListener(TimerEvent.TIMER,function(e:TimerEvent):void{
					stopFlickerIcon();
					if(flickerQueues.length){
						var flicker:Object=flickerQueues[flickerTimer.currentCount%flickerQueues.length];
						startFlickerIcon(flicker.icons,flicker.toolTip);
					}else{
						flickerTimer.reset();
					}
				});
				flickerTimer.addEventListener(TimerEvent.TIMER_COMPLETE,function(e:TimerEvent):void{
					flickerTimer.reset();
					if(flickerQueues.length){
						flickerTimer.start();
					}
				});

				if (NativeApplication.supportsSystemTrayIcon){
					NativeApplication.nativeApplication.autoExit = false;
					var tray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;
					tray.menu = iconMenu.nativeMenu;
					tray.addEventListener(ScreenMouseEvent.CLICK,function(e:ScreenMouseEvent):void{
						e.preventDefault();
						OpenMainPanel();
					});
				}
				if (NativeApplication.supportsDockIcon){
					var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;
					dock.menu = iconMenu.nativeMenu;
					dock.addEventListener(Event.ACTIVATE,function(e:Event):void{
						e.preventDefault();
						OpenMainPanel();
					});
				}
				trayToolTip="全能股市操盘系统控制台";
				
				_main=this;
				RemoteProxy.bind('User.Login',function(request:XML):void{
					MainWindow.remove();
					Main.setIconMenu(false);
					with(LoginWindow.loginWindow){
						open(true);
						nativeWindow.visible = true;
						nativeWindow.activate();
						nativeWindow.restore();
						nativeWindow.orderToFront();
						center();
					}
					Loading.hide(LoginWindow.loginWindow);
				});
				if(Params.autoLogin){
					User.relogin(false);
				}else{
					OpenMainPanel();
				}
			}
			private function OpenMainPanel():void{
				trace('OpenMainPanel');
				with(Params.isLogined?MainWindow.mainWindow:LoginWindow.loginWindow){
					open(true);
					nativeWindow.activate();
					nativeWindow.restore();
					nativeWindow.orderToFront();
					center();
				}
			}
			private function onSelectMenuItem(e:FlexNativeMenuEvent):void{
				switch(e.item.@name.toString()){
					case "exit":
						exit();
						break;
					case 'logout':
						User.Logout();
						break;
					case 'openmain':
						OpenMainPanel();
						break;
					default:
						trace(e.item.toString());
				}
			}
			
			public static function setIconMenu(isLoginAfter:Boolean):void{
				_main.iconMenu.dataProvider=(isLoginAfter?_main.trayIconMenuForLoginAfter:_main.trayIconMenuForLoginBefore);
			}
			public static function setActiveAccount(value:String):void{
				var xml:*=_main.trayIconMenuForLoginAfter.menuitem.(attribute('name')=='logout');
				//trace('setActiveAccount:',xml.toXMLString());
				xml.@label=("注销["+value+"]"+(RemoteProxy.connected?" - 在线":" - 离线"));
				setIconMenu(true);
			}
			public static function exit():void{
				System.gc();
				NativeApplication.nativeApplication.icon.bitmaps = [];
				NativeApplication.nativeApplication.exit();
			}
			
			public static function getFlickerIconFromBitmap(bitmap:Bitmap):Array{
				return _main.getFlickerIconFromBitmap(bitmap);
			}
			public static function startFlickerIcon(icons:Array,toolTip:String):void{
				_main.startFlickerIcon(icons,toolTip);
			}
			public static function stopFlickerIcon():void{
				_main.stopFlickerIcon();
			}
			public static function addFlickerQueue(type:String,iconClass:Class,toolTip:String):void{
				_main.addFlickerQueue(type,iconClass,toolTip);
			}
			public static function removeFlickerQueue(type:String):void{
				_main.removeFlickerQueue(type);
			}
			public static function clearFlickerQueue():void{
				_main.flickerQueues=new Array();
			}
		]]>
	</mx:Script>
	<mx:XML id="trayIconMenuForLoginAfter" format="e4x">
		<root>
			<menuitem label="注销" name="logout" keyEquivalent="l" />
			<menuitem type="separator"/>
			<menuitem label="打开主面板" name="openmain" keyEquivalent="o"/>
			<menuitem type="separator"/>
			<menuitem label="退出" name="exit" keyEquivalent="e"/>
		</root>
	</mx:XML>
	<mx:XML id="trayIconMenuForLoginBefore" format="e4x">
		<root>
			<menuitem label="打开主面板" name="openmain" keyEquivalent="l"/>
			<menuitem type="separator"/>
			<menuitem label="退出" name="exit" keyEquivalent="e"/>
		</root>
	</mx:XML>
	<mx:FlexNativeMenu id="iconMenu" dataProvider="{trayIconMenuForLoginBefore}" showRoot="false" labelField="@label" keyEquivalentField="@keyEquivalent"/>
</mx:WindowedApplication>
